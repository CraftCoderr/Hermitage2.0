package mem.kitek.server.map;

/**
 * Created by RINES on 20.10.17.
 */
public class HermitageMap {

    private final static Graph graph = new Graph();

    public static void init() {
        eup(11, 24);
        e(24, 27);
        e(27, 33);
        edown(33, 28);
        e(28, 26);
        e(33, 38);
        e(38, 39);
        e(39, 46);
        eup(46, 61);
        e(57, 61);
        e(61, 68);
        e(68, 69);
        e(61, 62);
        e(62, 63);

        e(90, 89);

        e(100, 101);
        e(101, 102);
        e(102, 107);
        eup(107, 117);
        e(115, 117);
        e(117, 121);
        e(121, 127);
        e(127, 129);
        e(129, 128);
        e(107, 128);
        e(129, 130);
        e(130, 131);

        edown(187, 177);
        e(177, 176);
        e(177, 175);
        edown(175, 156);
        e(156, 303);
        e(168, 307);
        e(307, 306);
        e(306, 305);
        e(305, 304);
        e(304, 308);
        e(307, 308);
        e(304, 289);
        e(167, 302);
        e(156, 153);
        e(153, 152);
        e(152, 151);
        e(153, 151);
        e(153, 190);
        e(153, 191);
        e(151, 192);
        e(190, 189);
        e(189, 188);
        e(189, 155);
        e(155, 188);
        e(167, 300);
        edown(300, 290);
        e(298, 288);
        edown(288, 282);
        e(294, 285);
        e(282, 196);
        e(196, 270);
        eup(270, 281);
        e(269, 270);
        e(269, 280);
        e(269, 275);
        edown(196, 192);
        e(195, 197);
        e(197, 198);
        e(198, 260);
        eup(260, 262);
        e(270, 197);
        e(272, 258);
        e(262, 258);
        e(261, 259);
        e(259, 203);
        e(203, 204);
        e(203, 202);
        e(202, 193);
        e(202, 143);
        eup(143, 146);
        e(146, 193);
        eup(146, 150);
        e(150, 193);
        e(204, 255);
        e(255, 256);
        e(256, 257);
        e(257, 258);
        e(258, 248);
        edown(248, 243);
        eup(248, 252);
        e(252, 254);
        e(254, 253);
        e(254, 206);
        e(206, 204);
        eup(206, 216);
        e(207, 217);
        e(208, 217);
        e(216, 223);
        e(216, 224);
        edown(224, 217);
        e(224, 229);
        e(224, 227);
        e(227, 228);
        e(229, 237);
        e(237, 243);
        eup(239, 236);
        e(237, 238);
        e(238, 239);
        e(239, 240);
        e(239, 241);
        e(240, 252);
        e(240, 236);

        edown(400, 381);
        e(351, 367);
        e(351, 359);
        eup(351, 358);
        e(358, 375);
        e(375, 376);
        e(375, 333);
        e(357, 359);
        e(357, 360);
        eup(360, 367);
        e(360, 368);
        eup(368, 370);
        eup(333, 342);
        edown(350, 343);
        e(338, 346); //??
        e(343, 316);
        eup(316, 332);
        e(316, 315);
        e(315, 314);
        e(318, 314);
        e(314, 332);
        e(323, 330);
        e(329, 324);

        //лестницы
        e(0, 192);
        e(0, 193);

        e(0, 24);
        e(24, 156);
        e(0, 156);
        e(156, 398);

        e(175, 381);
        e(174, 381);
        e(303, 381);
        e(381, 351);

        e(69, 302);
        e(54, 302);
        e(302, 358);
        e(302, 288);

        e(0, 269);
        e(0, 280);
        e(269, 314);
        e(280, 314);

        e(131, 206);
        e(131, 254);

        e(110, 241);
        e(110, 246);
        e(241, 246);

        //Входы первого этажа
        e(0, 11);
        e(0, 24);
        e(0, 100);
        e(0, 89);
    }

    private static void eup(int a, int b) {
        for(int i = a; i < b; ++i)
            e(i, i + 1);
    }

    private static void edown(int a, int b) {
        for(int i = a; i > b; --i)
            e(i, i - 1);
    }

    private static void e(int a, int b) {
        graph.edge(a, b);
    }

}
